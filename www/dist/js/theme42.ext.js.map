{"version":3,"names":[],"mappings":"","sources":["theme42.ext.js"],"sourcesContent":["/*global apex, $v*/\n\n/*!\n theme42.ext.js\n Copyright (c) 2012, 2017 Oracle and/or its affiliates. All rights reserved.\n */\n\n/**\n * @fileOverview\n * The apex.theme42.ext namespace is used to store all theme42 extension functions.\n * We need to check its existence as this file may be part of future APEX release.\n **/\n\nif ( apex.theme42 && !apex.theme42.ext ) {\n\n    apex.theme42.ext = {};\n\n    (function( $, ext ){\n        \"use strict\";\n        // Current Page ID.\n        var pageId = $v( \"pFlowStepId\" );\n\n        /**\n         * Enables a text field item to search labels in another checkbox item.\n         * Currently only checkbox label searching is supported.\n         *\n         * @param {Object} obj with the following option properties:\n         *                 itemId:          The item to be searched.\n         *                 searchFieldId:   Keyword text field that triggers the search.\n         *\n         * @example\n         * apex.theme42.ext.filterItem({\n         *   pItem:        \"P1_COUNTRY\",\n         *   pSearchItem:  \"P1_SEARCH\"\n         * });\n         *\n         * @function filterItem\n         * @memberOf apex.theme42.ext\n         **/\n\n        ext.filterItem = function( obj ) {\n\n            var CL_ACTIVE       = \"js-filter-active\",\n                CL_MATCH        = \"js-filter-match\",\n                TYPE_CB         = \"CHECKBOX_GROUP\",\n                itemId          = obj.pItem,\n                searchFieldId   = obj.pSearchItem,\n                searchField$    = $( \"#\" + searchFieldId );\n\n            searchField$.attr( \"type\", \"search\" );\n\n            // Constructor to store lables to be searched, as well as their jQuery selectors\n            var InitSearch = function( id ){\n                var itemLabels = [],\n                    itemType = apex.item( itemId ).item_type,\n                    i;\n\n                // Different item types may have different markup.\n                // TODO: support more item types, e.g. radioboxes.\n                var getLabel = function( obj$ ){\n                    if ( itemType === TYPE_CB ) {\n                        return obj$.next().text().toLowerCase();\n                    }\n                };\n\n                var getWrapper = function( obj$ ){\n                    if ( itemType === TYPE_CB ) {\n                        return obj$.parent();\n                    }\n                };\n\n                // Gather labels and their nodes\n                $( \"input[name=\" + id + \"]\" ).each(function(){\n                    var that$ = $( this );\n                    itemLabels.push( {\n                        node$: that$,\n                        txt: getLabel( that$ )\n                    });\n                });\n\n                this.search = function( key ) {\n                    var i, current, wrapper$;\n\n                    if ( key ) {\n                        $( \"#\" + id ).addClass( CL_ACTIVE );\n                        for ( i = 0; i < itemLabels.length; i++ ) {\n                            current = itemLabels[i];\n                            wrapper$ = getWrapper( current.node$ );\n                            if ( current.txt.indexOf( key.toLowerCase() ) >= 0 ) {\n                                wrapper$.addClass( CL_MATCH );\n                            } else {\n                                wrapper$.removeClass( CL_MATCH );\n                            }\n                        }\n                    } else {\n                        $( \"#\" + id ).removeClass( CL_ACTIVE );\n                    }\n                };\n            };\n            // supports multiple search on one page.\n            var filter = new InitSearch( itemId );\n\n            // search on page load, if search field already has value.\n            filter.search( searchField$.val() );\n\n            // search-as-you-type\n            searchField$\n                .on( \"keydown\", function( e ){\n                    if ( e.which === 13 ) {\n                        // Enter key won\"t submit the page.\n                        e.preventDefault();\n                    } else if ( e.which === 27 ) {\n                        // ESCAPE key won\"t close dialog.\n                        e.stopPropagation();\n                        // Clears input for browsers that don\"t support type=\"search\"\n                        $( this ).val( \"\" );\n                    }\n                })\n                .on( \"keyup\", function( e ){\n                    filter.search( $( this ).val() );\n                });\n        };\n\n        /**\n         * Filter Report Page is a report page that has a search / filter field(s), one or more reports with different\n         * template, and a radio item to switch between the reports, with only one report displayed at a time.\n         * This function handles the report refreshing when searching and toggling views.\n         * Also please remember to set \"Page Items to Submit\" attribute in each report to use search item name.\n         *\n         * @param {Object} obj with the following properties:\n         *                 pSearchItem:   The text field item to enter keywords.\n         *                 pToggleItem:   The radio group item to switch region\"s visibility\n         *                 pRegions:      An object which has the mapping between returned values\n         *                                of the above radio item and regions\" static IDs.\n         *                                See example below.\n         *\n         * @example:\n         * apex.theme42.ext.filterReportPage({\n         *     pSearchItem: \"P1_SEARCH\",\n         *     pToggleItem: \"P1_DISPLAY_AS\",\n         *     pRegions:    { CARDS:  \"cards_region\",\n         *                    REPORT: \"report_region\" }\n         * });\n         *\n         * @function filterReportPage\n         * @memberOf apex.theme42.ext\n         **/\n\n        ext.filterReportPage = function ( obj ) {\n            var regions         = obj.pRegions,\n                displayAsId     = obj.pToggleItem,\n                displayAs$      = $( \"#\" + displayAsId ),\n                searchField$    = $( \"#\" + obj.pSearchItem ),\n                types           = Object.keys( regions),\n                delay;\n\n            var refreshReport = function() {\n                var type = $v( displayAsId ),\n                    key  =  searchField$.val(),\n                    regionId,\n                    region$,\n                    i;\n\n                for ( i = 0; i < types.length; i++ ) {\n                    regionId = regions[ types[ i ] ];\n                    region$  = $( \"#\" + regionId);\n                    if ( type === types[ i ] ) {\n                        region$.show();\n                        // optimize refresh by comparing stored keyword\n                        if ( region$.data( \"key\" ) !== key ) {\n                            region$.trigger( \"apexrefresh\" ).data( \"key\", key );\n                        }\n                    } else {\n                        region$.hide();\n                    }\n                }\n            };\n\n            // events\n            searchField$\n                .on( \"keydown\", function ( e ) {\n                    if (e.which === 13) {\n                        // prevent ENTER key to submit page\n                        e.preventDefault();\n                    }\n                })\n                .on( \"input\", function () {\n                    clearTimeout( delay );\n                    delay = setTimeout(refreshReport, 250);\n                });\n\n            displayAs$.change( refreshReport );\n\n            // init\n            refreshReport();\n        };\n\n        /**\n         * Master Details Page\n         * TODO: documentation and change parameter to obj.\n         **/\n\n        ext.masterDetailPage = {};\n\n        (function( m ){\n\n            // The name of the Primary Key item. e.g. \"P8_ID\".\n            // it is set on page load using masterDetail.initializePage()\n            var primaryKeyItem,\n            // The hidden item that holds the filter count value.\n                filterCountItem  = \"P\" + pageId + \"_FILTER_COUNT\",\n            // URL of buttons to open modal dialog.\n                buttons = [],\n                LINK_CLASS = \"js-master-row\";\n\n            // Select regions to be refreshed or show/hide.\n            // Details region reports should have \".js-detail-rds\" class\n            // in order to be dynamically refreshed.\n            var masterDetailRegions$  = $( \".js-master-region, .js-detail-rds, .js-detail-region\" ),\n                noRowSelectedRegion$  = $( \".no-record-selected\" ),\n                bodyContentContainer$ = $( \".t-Body-contentInner\" );\n\n            var hideRecord = function() {\n                masterDetailRegions$.hide();\n                noRowSelectedRegion$.show();\n                bodyContentContainer$.addClass( \"center-regions\" );\n            };\n\n            var showRecord = function() {\n                masterDetailRegions$.show();\n                noRowSelectedRegion$.hide();\n                bodyContentContainer$.removeClass( \"center-regions\" );\n            };\n\n            var scrollToRecord = function( id, requireRefresh ) {\n                var ml$ = $( \".\" + LINK_CLASS );\n                if ( ml$[0] ) {\n                    var currentRow$ = ml$.filter( \"[data-id=\\\"\" + id + \"\\\"]\").parent();\n                    if ( requireRefresh ) {\n                        loadRecords( currentRow$.find( \"a.\" + LINK_CLASS ) );\n                    }\n\n                    $( \".search-results\" ).animate(\n                        {\n                            scrollTop: currentRow$.position().top - $( \".search-region\" ).outerHeight()\n                        }, 500 );\n\n                    currentRow$.addClass( \"is-active\" ).focus();\n                }\n            };\n\n            var loadRecords = function( obj ){\n                var recordContainers$ = $( \".\" + LINK_CLASS ).parent(),\n                    triggeringElem$ = $( obj );\n\n                $.ajax({\n                    url: triggeringElem$.data( \"checksum\" )\n                }).done( refreshReports );\n\n                recordContainers$.removeClass( \"is-active\" );\n                triggeringElem$.parent().addClass( \"is-active\" );\n            };\n\n            var refreshReports = function(){\n                // refresh all details reports\n                masterDetailRegions$.trigger( \"apexrefresh\" );\n                // refresh the report used to generate buttons\n                $( \".js-links-region\" ).trigger( \"apexrefresh\" );\n                showRecord();\n            };\n\n            var updateFilterBadge = function(){\n                var filterBadge$,\n                    count = $v( filterCountItem );\n                // Append filter count markup to the Apply Filters button\n                $( \"#apply_filters_btn .t-Button-label\" ).append( \"<span id=\\\"filter_count\\\"></span>\" );\n                filterBadge$  = $( \"#filter_count\" );\n                // Update count\n                if ( count > 0 ) {\n                    filterBadge$.text( count );\n                } else {\n                    filterBadge$.text(\"\");\n                }\n            };\n\n            var buildButtons = function(){\n                var bLen = buttons.length,\n                    aButton,\n                    i;\n                // populate the array with button IDs from the hidden report called \"Edit Links\"\n                $( \"#links_region .js-button-url\" ).each(function(){\n                    buttons.push( $( this ).data( \"button-id\" ) );\n                });\n                // update the \"onclick\" attribute existing buttons to open correct modal dialogs\n                // for the record id selected.\n                for ( i = 0; i < bLen; i++ ) {\n                    aButton = buttons[i];\n                    $( \"#\" + aButton )\n                        .attr( \"onclick\", $( \"[data-button-id=\\\"\" + aButton + \"\\\"]\" )\n                        .attr( \"href\" ) );\n                }\n            };\n\n            var initializePage = function( keyItem ){\n                primaryKeyItem = keyItem;\n                // highlight and scroll to the record if you are coming from another report\n                var currentID = $v( primaryKeyItem );\n                if ( currentID !== \"\" ) {\n                    $( window ).on( \"theme42ready\", function() {\n                        scrollToRecord( currentID );\n                        showRecord();\n                    });\n                } else {\n                    hideRecord();\n                }\n                // click event on row links\n                $( \"body\" ).on(\"click\", \".\" + LINK_CLASS, function( e ) {\n                    loadRecords( this );\n                });\n                // prepare the button URLs to open modal dialogs\n                $( \"#links_region .js-button-url\" ).each(function( e ){\n                    buttons.push( $( this ).data( \"button-id\" ) );\n                });\n            };\n            // public methods to be used in Dynamic Actions.\n            m.initializePage        = initializePage;\n            m.hideRecord            = hideRecord;\n            m.showRecord            = showRecord;\n            m.scrollToRecord        = scrollToRecord;\n            m.refreshReports        = refreshReports;\n            m.buildButtons          = buildButtons;\n            m.updateFilterBadge     = updateFilterBadge;\n\n        })( ext.masterDetailPage );\n\n    })( apex.jQuery, apex.theme42.ext );\n\n}"],"file":"theme42.ext.js"}